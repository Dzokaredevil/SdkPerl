=begin comment

Marketcheck Cars API

<b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>

OpenAPI spec version: 1.0.3

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::MarketcheckCarsApi::DealerApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::MarketcheckCarsApi::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::MarketcheckCarsApi::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::MarketcheckCarsApi::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# dealer_search
#
# Find car dealers around
# 
# @param double $latitude Latitude component of location (required)
# @param double $longitude Longitude component of location (required)
# @param int $radius Radius around the search location (required)
# @param string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
# @param int $rows Number of results to return. Default is 10. Max is 50 (optional)
# @param int $start Offset for the search results. Default is 1. (optional)
{
    my $params = {
    'latitude' => {
        data_type => 'double',
        description => 'Latitude component of location',
        required => '1',
    },
    'longitude' => {
        data_type => 'double',
        description => 'Longitude component of location',
        required => '1',
    },
    'radius' => {
        data_type => 'int',
        description => 'Radius around the search location',
        required => '1',
    },
    'api_key' => {
        data_type => 'string',
        description => 'The API Authentication Key. Mandatory with all API calls.',
        required => '0',
    },
    'rows' => {
        data_type => 'int',
        description => 'Number of results to return. Default is 10. Max is 50',
        required => '0',
    },
    'start' => {
        data_type => 'int',
        description => 'Offset for the search results. Default is 1.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'dealer_search' } = { 
    	summary => 'Find car dealers around',
        params => $params,
        returns => 'DealersResponse',
        };
}
# @return DealersResponse
#
sub dealer_search {
    my ($self, %args) = @_;

    # verify the required parameter 'latitude' is set
    unless (exists $args{'latitude'}) {
      croak("Missing the required parameter 'latitude' when calling dealer_search");
    }

    # verify the required parameter 'longitude' is set
    unless (exists $args{'longitude'}) {
      croak("Missing the required parameter 'longitude' when calling dealer_search");
    }

    # verify the required parameter 'radius' is set
    unless (exists $args{'radius'}) {
      croak("Missing the required parameter 'radius' when calling dealer_search");
    }

    # parse inputs
    my $_resource_path = '/dealers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'api_key'}) {
        $query_params->{'api_key'} = $self->{api_client}->to_query_value($args{'api_key'});
    }

    # query params
    if ( exists $args{'latitude'}) {
        $query_params->{'latitude'} = $self->{api_client}->to_query_value($args{'latitude'});
    }

    # query params
    if ( exists $args{'longitude'}) {
        $query_params->{'longitude'} = $self->{api_client}->to_query_value($args{'longitude'});
    }

    # query params
    if ( exists $args{'radius'}) {
        $query_params->{'radius'} = $self->{api_client}->to_query_value($args{'radius'});
    }

    # query params
    if ( exists $args{'rows'}) {
        $query_params->{'rows'} = $self->{api_client}->to_query_value($args{'rows'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DealersResponse', $response);
    return $_response_object;
}

#
# get_dealer
#
# Dealer by id
# 
# @param string $dealer_id Dealer id to get all the dealer info attributes (required)
# @param string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
{
    my $params = {
    'dealer_id' => {
        data_type => 'string',
        description => 'Dealer id to get all the dealer info attributes',
        required => '1',
    },
    'api_key' => {
        data_type => 'string',
        description => 'The API Authentication Key. Mandatory with all API calls.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_dealer' } = { 
    	summary => 'Dealer by id',
        params => $params,
        returns => 'Dealer',
        };
}
# @return Dealer
#
sub get_dealer {
    my ($self, %args) = @_;

    # verify the required parameter 'dealer_id' is set
    unless (exists $args{'dealer_id'}) {
      croak("Missing the required parameter 'dealer_id' when calling get_dealer");
    }

    # parse inputs
    my $_resource_path = '/dealer/{dealer_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'api_key'}) {
        $query_params->{'api_key'} = $self->{api_client}->to_query_value($args{'api_key'});
    }

    # path params
    if ( exists $args{'dealer_id'}) {
        my $_base_variable = "{" . "dealer_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'dealer_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Dealer', $response);
    return $_response_object;
}

#
# get_dealer_active_inventory
#
# Dealer inventory
# 
# @param string $dealer_id Id representing the dealer to fetch the active inventory for (required)
# @param string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
# @param int $rows Number of results to return. Default is 10. Max is 50 (optional)
# @param int $start Page number to fetch the results for the given criteria. Default is 1. Pagination is allowed only till first 1000 results for the search and sort criteria. The page value can be only between 1 to 1000/rows (optional)
{
    my $params = {
    'dealer_id' => {
        data_type => 'string',
        description => 'Id representing the dealer to fetch the active inventory for',
        required => '1',
    },
    'api_key' => {
        data_type => 'string',
        description => 'The API Authentication Key. Mandatory with all API calls.',
        required => '0',
    },
    'rows' => {
        data_type => 'int',
        description => 'Number of results to return. Default is 10. Max is 50',
        required => '0',
    },
    'start' => {
        data_type => 'int',
        description => 'Page number to fetch the results for the given criteria. Default is 1. Pagination is allowed only till first 1000 results for the search and sort criteria. The page value can be only between 1 to 1000/rows',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_dealer_active_inventory' } = { 
    	summary => 'Dealer inventory',
        params => $params,
        returns => 'BaseListing',
        };
}
# @return BaseListing
#
sub get_dealer_active_inventory {
    my ($self, %args) = @_;

    # verify the required parameter 'dealer_id' is set
    unless (exists $args{'dealer_id'}) {
      croak("Missing the required parameter 'dealer_id' when calling get_dealer_active_inventory");
    }

    # parse inputs
    my $_resource_path = '/dealer/{dealer_id}/active/inventory';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'api_key'}) {
        $query_params->{'api_key'} = $self->{api_client}->to_query_value($args{'api_key'});
    }

    # query params
    if ( exists $args{'rows'}) {
        $query_params->{'rows'} = $self->{api_client}->to_query_value($args{'rows'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # path params
    if ( exists $args{'dealer_id'}) {
        my $_base_variable = "{" . "dealer_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'dealer_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('BaseListing', $response);
    return $_response_object;
}

#
# get_dealer_historical_inventory
#
# Dealer's historical inventory
# 
# @param string $dealer_id Id representing the dealer to fetch the active inventory for (required)
{
    my $params = {
    'dealer_id' => {
        data_type => 'string',
        description => 'Id representing the dealer to fetch the active inventory for',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_dealer_historical_inventory' } = { 
    	summary => 'Dealer&#39;s historical inventory',
        params => $params,
        returns => 'BaseListing',
        };
}
# @return BaseListing
#
sub get_dealer_historical_inventory {
    my ($self, %args) = @_;

    # verify the required parameter 'dealer_id' is set
    unless (exists $args{'dealer_id'}) {
      croak("Missing the required parameter 'dealer_id' when calling get_dealer_historical_inventory");
    }

    # parse inputs
    my $_resource_path = '/dealer/{dealer_id}/historical/inventory';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'dealer_id'}) {
        my $_base_variable = "{" . "dealer_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'dealer_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('BaseListing', $response);
    return $_response_object;
}

#
# get_dealer_landing_page
#
# Experimental: Get cached version of dealer landing page by dealer id
# 
# @param string $dealer_id Robot id to get the landing page html for (required)
# @param string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
{
    my $params = {
    'dealer_id' => {
        data_type => 'string',
        description => 'Robot id to get the landing page html for',
        required => '1',
    },
    'api_key' => {
        data_type => 'string',
        description => 'The API Authentication Key. Mandatory with all API calls.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_dealer_landing_page' } = { 
    	summary => 'Experimental: Get cached version of dealer landing page by dealer id',
        params => $params,
        returns => 'DealerLandingPage',
        };
}
# @return DealerLandingPage
#
sub get_dealer_landing_page {
    my ($self, %args) = @_;

    # verify the required parameter 'dealer_id' is set
    unless (exists $args{'dealer_id'}) {
      croak("Missing the required parameter 'dealer_id' when calling get_dealer_landing_page");
    }

    # parse inputs
    my $_resource_path = '/dealer/{dealer_id}/landing';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'api_key'}) {
        $query_params->{'api_key'} = $self->{api_client}->to_query_value($args{'api_key'});
    }

    # path params
    if ( exists $args{'dealer_id'}) {
        my $_base_variable = "{" . "dealer_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'dealer_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DealerLandingPage', $response);
    return $_response_object;
}

#
# get_dealer_ratings
#
# Dealer's Rating
# 
# @param string $dealer_id Id representing the dealer to fetch the ratings for (required)
{
    my $params = {
    'dealer_id' => {
        data_type => 'string',
        description => 'Id representing the dealer to fetch the ratings for',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_dealer_ratings' } = { 
    	summary => 'Dealer&#39;s Rating',
        params => $params,
        returns => 'DealerRating',
        };
}
# @return DealerRating
#
sub get_dealer_ratings {
    my ($self, %args) = @_;

    # verify the required parameter 'dealer_id' is set
    unless (exists $args{'dealer_id'}) {
      croak("Missing the required parameter 'dealer_id' when calling get_dealer_ratings");
    }

    # parse inputs
    my $_resource_path = '/dealer/{dealer_id}/ratings';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'dealer_id'}) {
        my $_base_variable = "{" . "dealer_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'dealer_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DealerRating', $response);
    return $_response_object;
}

#
# get_dealer_reviews
#
# Dealer's Review
# 
# @param string $dealer_id Id representing the dealer to fetch the ratings for (required)
{
    my $params = {
    'dealer_id' => {
        data_type => 'string',
        description => 'Id representing the dealer to fetch the ratings for',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_dealer_reviews' } = { 
    	summary => 'Dealer&#39;s Review',
        params => $params,
        returns => 'DealerReview',
        };
}
# @return DealerReview
#
sub get_dealer_reviews {
    my ($self, %args) = @_;

    # verify the required parameter 'dealer_id' is set
    unless (exists $args{'dealer_id'}) {
      croak("Missing the required parameter 'dealer_id' when calling get_dealer_reviews");
    }

    # parse inputs
    my $_resource_path = '/dealer/{dealer_id}/reviews';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'dealer_id'}) {
        my $_base_variable = "{" . "dealer_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'dealer_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DealerReview', $response);
    return $_response_object;
}

1;
