=begin comment

Marketcheck Cars API

<b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>

OpenAPI spec version: 1.0.3

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::MarketcheckCarsApi::MarketApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::MarketcheckCarsApi::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::MarketcheckCarsApi::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::MarketcheckCarsApi::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# get_averages
#
# [MOCK] Get Averages for YMM
# 
# @param string $vin VIN as a reference to the type of car for which averages data is to be returned (required)
# @param string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
# @param string $year Year of the car (optional)
# @param string $make Make of the car (optional)
# @param string $model Model of the Car (optional)
# @param string $trim Trim of the Car (optional)
# @param string $fields Comma separated list of fields to generate stats for. Allowed fields in the list are - price, miles, msrp, dom (days on market) (optional)
{
    my $params = {
    'vin' => {
        data_type => 'string',
        description => 'VIN as a reference to the type of car for which averages data is to be returned',
        required => '1',
    },
    'api_key' => {
        data_type => 'string',
        description => 'The API Authentication Key. Mandatory with all API calls.',
        required => '0',
    },
    'year' => {
        data_type => 'string',
        description => 'Year of the car',
        required => '0',
    },
    'make' => {
        data_type => 'string',
        description => 'Make of the car',
        required => '0',
    },
    'model' => {
        data_type => 'string',
        description => 'Model of the Car',
        required => '0',
    },
    'trim' => {
        data_type => 'string',
        description => 'Trim of the Car',
        required => '0',
    },
    'fields' => {
        data_type => 'string',
        description => 'Comma separated list of fields to generate stats for. Allowed fields in the list are - price, miles, msrp, dom (days on market)',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_averages' } = { 
    	summary => '[MOCK] Get Averages for YMM',
        params => $params,
        returns => 'Averages',
        };
}
# @return Averages
#
sub get_averages {
    my ($self, %args) = @_;

    # verify the required parameter 'vin' is set
    unless (exists $args{'vin'}) {
      croak("Missing the required parameter 'vin' when calling get_averages");
    }

    # parse inputs
    my $_resource_path = '/averages';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'api_key'}) {
        $query_params->{'api_key'} = $self->{api_client}->to_query_value($args{'api_key'});
    }

    # query params
    if ( exists $args{'vin'}) {
        $query_params->{'vin'} = $self->{api_client}->to_query_value($args{'vin'});
    }

    # query params
    if ( exists $args{'year'}) {
        $query_params->{'year'} = $self->{api_client}->to_query_value($args{'year'});
    }

    # query params
    if ( exists $args{'make'}) {
        $query_params->{'make'} = $self->{api_client}->to_query_value($args{'make'});
    }

    # query params
    if ( exists $args{'model'}) {
        $query_params->{'model'} = $self->{api_client}->to_query_value($args{'model'});
    }

    # query params
    if ( exists $args{'trim'}) {
        $query_params->{'trim'} = $self->{api_client}->to_query_value($args{'trim'});
    }

    # query params
    if ( exists $args{'fields'}) {
        $query_params->{'fields'} = $self->{api_client}->to_query_value($args{'fields'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Averages', $response);
    return $_response_object;
}

#
# get_comparison
#
# Compare market
# 
# @param string $vin VIN as a reference to the type of car for which comparison data is to be returned (required)
# @param string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
{
    my $params = {
    'vin' => {
        data_type => 'string',
        description => 'VIN as a reference to the type of car for which comparison data is to be returned',
        required => '1',
    },
    'api_key' => {
        data_type => 'string',
        description => 'The API Authentication Key. Mandatory with all API calls.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_comparison' } = { 
    	summary => 'Compare market',
        params => $params,
        returns => 'ComparisonPoint',
        };
}
# @return ComparisonPoint
#
sub get_comparison {
    my ($self, %args) = @_;

    # verify the required parameter 'vin' is set
    unless (exists $args{'vin'}) {
      croak("Missing the required parameter 'vin' when calling get_comparison");
    }

    # parse inputs
    my $_resource_path = '/comparison';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'api_key'}) {
        $query_params->{'api_key'} = $self->{api_client}->to_query_value($args{'api_key'});
    }

    # query params
    if ( exists $args{'vin'}) {
        $query_params->{'vin'} = $self->{api_client}->to_query_value($args{'vin'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComparisonPoint', $response);
    return $_response_object;
}

#
# get_competition
#
# Competitors
# 
# @param string $vin VIN as a reference to the type of car for which competitors data is to be returned (required)
# @param string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
{
    my $params = {
    'vin' => {
        data_type => 'string',
        description => 'VIN as a reference to the type of car for which competitors data is to be returned',
        required => '1',
    },
    'api_key' => {
        data_type => 'string',
        description => 'The API Authentication Key. Mandatory with all API calls.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_competition' } = { 
    	summary => 'Competitors',
        params => $params,
        returns => 'CompetitorsPoint',
        };
}
# @return CompetitorsPoint
#
sub get_competition {
    my ($self, %args) = @_;

    # verify the required parameter 'vin' is set
    unless (exists $args{'vin'}) {
      croak("Missing the required parameter 'vin' when calling get_competition");
    }

    # parse inputs
    my $_resource_path = '/competition';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'api_key'}) {
        $query_params->{'api_key'} = $self->{api_client}->to_query_value($args{'api_key'});
    }

    # query params
    if ( exists $args{'vin'}) {
        $query_params->{'vin'} = $self->{api_client}->to_query_value($args{'vin'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CompetitorsPoint', $response);
    return $_response_object;
}

#
# get_depreciation
#
# Depreciation
# 
# @param string $vin VIN as a reference to the type of car for which Depreciation stats is to be returned (required)
# @param string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
{
    my $params = {
    'vin' => {
        data_type => 'string',
        description => 'VIN as a reference to the type of car for which Depreciation stats is to be returned',
        required => '1',
    },
    'api_key' => {
        data_type => 'string',
        description => 'The API Authentication Key. Mandatory with all API calls.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_depreciation' } = { 
    	summary => 'Depreciation',
        params => $params,
        returns => 'DepreciationPoint',
        };
}
# @return DepreciationPoint
#
sub get_depreciation {
    my ($self, %args) = @_;

    # verify the required parameter 'vin' is set
    unless (exists $args{'vin'}) {
      croak("Missing the required parameter 'vin' when calling get_depreciation");
    }

    # parse inputs
    my $_resource_path = '/depreciation';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'api_key'}) {
        $query_params->{'api_key'} = $self->{api_client}->to_query_value($args{'api_key'});
    }

    # query params
    if ( exists $args{'vin'}) {
        $query_params->{'vin'} = $self->{api_client}->to_query_value($args{'vin'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DepreciationPoint', $response);
    return $_response_object;
}

#
# get_mds
#
# Market Days Supply
# 
# @param string $vin VIN to decode (required)
# @param string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
# @param string $exact Exact parameter (optional)
# @param double $latitude Latitude component of location (optional)
# @param double $longitude Longitude component of location (optional)
# @param int $radius Radius around the search location (optional)
# @param string $debug Debug parameter (optional)
# @param string $include_sold To fetch sold vins (optional)
{
    my $params = {
    'vin' => {
        data_type => 'string',
        description => 'VIN to decode',
        required => '1',
    },
    'api_key' => {
        data_type => 'string',
        description => 'The API Authentication Key. Mandatory with all API calls.',
        required => '0',
    },
    'exact' => {
        data_type => 'string',
        description => 'Exact parameter',
        required => '0',
    },
    'latitude' => {
        data_type => 'double',
        description => 'Latitude component of location',
        required => '0',
    },
    'longitude' => {
        data_type => 'double',
        description => 'Longitude component of location',
        required => '0',
    },
    'radius' => {
        data_type => 'int',
        description => 'Radius around the search location',
        required => '0',
    },
    'debug' => {
        data_type => 'string',
        description => 'Debug parameter',
        required => '0',
    },
    'include_sold' => {
        data_type => 'string',
        description => 'To fetch sold vins',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_mds' } = { 
    	summary => 'Market Days Supply',
        params => $params,
        returns => 'Mds',
        };
}
# @return Mds
#
sub get_mds {
    my ($self, %args) = @_;

    # verify the required parameter 'vin' is set
    unless (exists $args{'vin'}) {
      croak("Missing the required parameter 'vin' when calling get_mds");
    }

    # parse inputs
    my $_resource_path = '/mds';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'api_key'}) {
        $query_params->{'api_key'} = $self->{api_client}->to_query_value($args{'api_key'});
    }

    # query params
    if ( exists $args{'vin'}) {
        $query_params->{'vin'} = $self->{api_client}->to_query_value($args{'vin'});
    }

    # query params
    if ( exists $args{'exact'}) {
        $query_params->{'exact'} = $self->{api_client}->to_query_value($args{'exact'});
    }

    # query params
    if ( exists $args{'latitude'}) {
        $query_params->{'latitude'} = $self->{api_client}->to_query_value($args{'latitude'});
    }

    # query params
    if ( exists $args{'longitude'}) {
        $query_params->{'longitude'} = $self->{api_client}->to_query_value($args{'longitude'});
    }

    # query params
    if ( exists $args{'radius'}) {
        $query_params->{'radius'} = $self->{api_client}->to_query_value($args{'radius'});
    }

    # query params
    if ( exists $args{'debug'}) {
        $query_params->{'debug'} = $self->{api_client}->to_query_value($args{'debug'});
    }

    # query params
    if ( exists $args{'include_sold'}) {
        $query_params->{'include_sold'} = $self->{api_client}->to_query_value($args{'include_sold'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Mds', $response);
    return $_response_object;
}

#
# get_popularity
#
# Popularity
# 
# @param string $year Year of the car (required)
# @param string $make Make of the car (required)
# @param string $model Model of the Car (required)
# @param string $trim Trim of the Car (required)
# @param string $body_type Body type to filter the cars on. Valid values are the ones returned by body_type facets API call (required)
# @param string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
# @param string $stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
{
    my $params = {
    'year' => {
        data_type => 'string',
        description => 'Year of the car',
        required => '1',
    },
    'make' => {
        data_type => 'string',
        description => 'Make of the car',
        required => '1',
    },
    'model' => {
        data_type => 'string',
        description => 'Model of the Car',
        required => '1',
    },
    'trim' => {
        data_type => 'string',
        description => 'Trim of the Car',
        required => '1',
    },
    'body_type' => {
        data_type => 'string',
        description => 'Body type to filter the cars on. Valid values are the ones returned by body_type facets API call',
        required => '1',
    },
    'api_key' => {
        data_type => 'string',
        description => 'The API Authentication Key. Mandatory with all API calls.',
        required => '0',
    },
    'stats' => {
        data_type => 'string',
        description => 'The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_popularity' } = { 
    	summary => 'Popularity',
        params => $params,
        returns => 'ARRAY[PopularityItem]',
        };
}
# @return ARRAY[PopularityItem]
#
sub get_popularity {
    my ($self, %args) = @_;

    # verify the required parameter 'year' is set
    unless (exists $args{'year'}) {
      croak("Missing the required parameter 'year' when calling get_popularity");
    }

    # verify the required parameter 'make' is set
    unless (exists $args{'make'}) {
      croak("Missing the required parameter 'make' when calling get_popularity");
    }

    # verify the required parameter 'model' is set
    unless (exists $args{'model'}) {
      croak("Missing the required parameter 'model' when calling get_popularity");
    }

    # verify the required parameter 'trim' is set
    unless (exists $args{'trim'}) {
      croak("Missing the required parameter 'trim' when calling get_popularity");
    }

    # verify the required parameter 'body_type' is set
    unless (exists $args{'body_type'}) {
      croak("Missing the required parameter 'body_type' when calling get_popularity");
    }

    # parse inputs
    my $_resource_path = '/popularity';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'api_key'}) {
        $query_params->{'api_key'} = $self->{api_client}->to_query_value($args{'api_key'});
    }

    # query params
    if ( exists $args{'year'}) {
        $query_params->{'year'} = $self->{api_client}->to_query_value($args{'year'});
    }

    # query params
    if ( exists $args{'make'}) {
        $query_params->{'make'} = $self->{api_client}->to_query_value($args{'make'});
    }

    # query params
    if ( exists $args{'model'}) {
        $query_params->{'model'} = $self->{api_client}->to_query_value($args{'model'});
    }

    # query params
    if ( exists $args{'trim'}) {
        $query_params->{'trim'} = $self->{api_client}->to_query_value($args{'trim'});
    }

    # query params
    if ( exists $args{'body_type'}) {
        $query_params->{'body_type'} = $self->{api_client}->to_query_value($args{'body_type'});
    }

    # query params
    if ( exists $args{'stats'}) {
        $query_params->{'stats'} = $self->{api_client}->to_query_value($args{'stats'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[PopularityItem]', $response);
    return $_response_object;
}

#
# get_trends
#
# Get Trends for criteria
# 
# @param string $vin VIN as a reference to the type of car for which trend data is to be returned (required)
# @param string $car_type Car type. Allowed values are - new / used / certified (required)
# @param string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
# @param string $year Year of the car (optional)
# @param string $make Make of the car (optional)
# @param string $model Model of the Car (optional)
# @param string $trim Trim of the Car (optional)
{
    my $params = {
    'vin' => {
        data_type => 'string',
        description => 'VIN as a reference to the type of car for which trend data is to be returned',
        required => '1',
    },
    'car_type' => {
        data_type => 'string',
        description => 'Car type. Allowed values are - new / used / certified',
        required => '1',
    },
    'api_key' => {
        data_type => 'string',
        description => 'The API Authentication Key. Mandatory with all API calls.',
        required => '0',
    },
    'year' => {
        data_type => 'string',
        description => 'Year of the car',
        required => '0',
    },
    'make' => {
        data_type => 'string',
        description => 'Make of the car',
        required => '0',
    },
    'model' => {
        data_type => 'string',
        description => 'Model of the Car',
        required => '0',
    },
    'trim' => {
        data_type => 'string',
        description => 'Trim of the Car',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_trends' } = { 
    	summary => 'Get Trends for criteria',
        params => $params,
        returns => 'ARRAY[TrendPoint]',
        };
}
# @return ARRAY[TrendPoint]
#
sub get_trends {
    my ($self, %args) = @_;

    # verify the required parameter 'vin' is set
    unless (exists $args{'vin'}) {
      croak("Missing the required parameter 'vin' when calling get_trends");
    }

    # verify the required parameter 'car_type' is set
    unless (exists $args{'car_type'}) {
      croak("Missing the required parameter 'car_type' when calling get_trends");
    }

    # parse inputs
    my $_resource_path = '/trends';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'api_key'}) {
        $query_params->{'api_key'} = $self->{api_client}->to_query_value($args{'api_key'});
    }

    # query params
    if ( exists $args{'vin'}) {
        $query_params->{'vin'} = $self->{api_client}->to_query_value($args{'vin'});
    }

    # query params
    if ( exists $args{'car_type'}) {
        $query_params->{'car_type'} = $self->{api_client}->to_query_value($args{'car_type'});
    }

    # query params
    if ( exists $args{'year'}) {
        $query_params->{'year'} = $self->{api_client}->to_query_value($args{'year'});
    }

    # query params
    if ( exists $args{'make'}) {
        $query_params->{'make'} = $self->{api_client}->to_query_value($args{'make'});
    }

    # query params
    if ( exists $args{'model'}) {
        $query_params->{'model'} = $self->{api_client}->to_query_value($args{'model'});
    }

    # query params
    if ( exists $args{'trim'}) {
        $query_params->{'trim'} = $self->{api_client}->to_query_value($args{'trim'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[TrendPoint]', $response);
    return $_response_object;
}

1;
