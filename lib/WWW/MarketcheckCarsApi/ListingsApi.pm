=begin comment

Marketcheck Cars API

<b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>

OpenAPI spec version: 1.0.3

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::MarketcheckCarsApi::ListingsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::MarketcheckCarsApi::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::MarketcheckCarsApi::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::MarketcheckCarsApi::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# get_listing
#
# Listing by id
# 
# @param string $id Listing id to get all the listing attributes (required)
# @param string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Listing id to get all the listing attributes',
        required => '1',
    },
    'api_key' => {
        data_type => 'string',
        description => 'The API Authentication Key. Mandatory with all API calls.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_listing' } = { 
    	summary => 'Listing by id',
        params => $params,
        returns => 'Listing',
        };
}
# @return Listing
#
sub get_listing {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_listing");
    }

    # parse inputs
    my $_resource_path = '/listing/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'api_key'}) {
        $query_params->{'api_key'} = $self->{api_client}->to_query_value($args{'api_key'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Listing', $response);
    return $_response_object;
}

#
# get_listing_extra
#
# Long text Listings attributes for Listing with the given id
# 
# @param string $id Listing id to get all the long text listing attributes (required)
# @param string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Listing id to get all the long text listing attributes',
        required => '1',
    },
    'api_key' => {
        data_type => 'string',
        description => 'The API Authentication Key. Mandatory with all API calls.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_listing_extra' } = { 
    	summary => 'Long text Listings attributes for Listing with the given id',
        params => $params,
        returns => 'ListingExtraAttributes',
        };
}
# @return ListingExtraAttributes
#
sub get_listing_extra {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_listing_extra");
    }

    # parse inputs
    my $_resource_path = '/listing/{id}/extra';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'api_key'}) {
        $query_params->{'api_key'} = $self->{api_client}->to_query_value($args{'api_key'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ListingExtraAttributes', $response);
    return $_response_object;
}

#
# get_listing_media
#
# Listing media by id
# 
# @param string $id Listing id to get all the listing attributes (required)
# @param string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Listing id to get all the listing attributes',
        required => '1',
    },
    'api_key' => {
        data_type => 'string',
        description => 'The API Authentication Key. Mandatory with all API calls.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_listing_media' } = { 
    	summary => 'Listing media by id',
        params => $params,
        returns => 'ListingMedia',
        };
}
# @return ListingMedia
#
sub get_listing_media {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_listing_media");
    }

    # parse inputs
    my $_resource_path = '/listing/{id}/media';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'api_key'}) {
        $query_params->{'api_key'} = $self->{api_client}->to_query_value($args{'api_key'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ListingMedia', $response);
    return $_response_object;
}

#
# get_listing_vdp
#
# Get listing HTML
# 
# @param string $id Listing id to get the vehicle details page (VDP) HTML (required)
# @param string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
# @param string $html Get only HTML for given listings VDP page (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Listing id to get the vehicle details page (VDP) HTML',
        required => '1',
    },
    'api_key' => {
        data_type => 'string',
        description => 'The API Authentication Key. Mandatory with all API calls.',
        required => '0',
    },
    'html' => {
        data_type => 'string',
        description => 'Get only HTML for given listings VDP page',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_listing_vdp' } = { 
    	summary => 'Get listing HTML',
        params => $params,
        returns => 'ListingVDP',
        };
}
# @return ListingVDP
#
sub get_listing_vdp {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_listing_vdp");
    }

    # parse inputs
    my $_resource_path = '/listing/{id}/vdp';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'api_key'}) {
        $query_params->{'api_key'} = $self->{api_client}->to_query_value($args{'api_key'});
    }

    # query params
    if ( exists $args{'html'}) {
        $query_params->{'html'} = $self->{api_client}->to_query_value($args{'html'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ListingVDP', $response);
    return $_response_object;
}

#
# get_summary_report
#
# Get Summary Report
# 
# @param string $vin VIN as a reference to the type of car for which Summary data is to be returned (required)
# @param string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
{
    my $params = {
    'vin' => {
        data_type => 'string',
        description => 'VIN as a reference to the type of car for which Summary data is to be returned',
        required => '1',
    },
    'api_key' => {
        data_type => 'string',
        description => 'The API Authentication Key. Mandatory with all API calls.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_summary_report' } = { 
    	summary => 'Get Summary Report',
        params => $params,
        returns => 'ARRAY[VinReport]',
        };
}
# @return ARRAY[VinReport]
#
sub get_summary_report {
    my ($self, %args) = @_;

    # verify the required parameter 'vin' is set
    unless (exists $args{'vin'}) {
      croak("Missing the required parameter 'vin' when calling get_summary_report");
    }

    # parse inputs
    my $_resource_path = '/vin_report_summary';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'api_key'}) {
        $query_params->{'api_key'} = $self->{api_client}->to_query_value($args{'api_key'});
    }

    # query params
    if ( exists $args{'vin'}) {
        $query_params->{'vin'} = $self->{api_client}->to_query_value($args{'vin'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[VinReport]', $response);
    return $_response_object;
}

#
# search
#
# Gets active car listings for the given search criteria
# 
# @param string $api_key The API Authentication Key. Mandatory with all API calls. (optional)
# @param double $latitude Latitude component of location (optional)
# @param double $longitude Longitude component of location (optional)
# @param int $radius Radius around the search location (optional)
# @param string $car_type Car type. Allowed values are - new / used / certified (optional)
# @param string $seller_type Seller type to filter cars on. Valid filter values are those that our Search facets API returns for unique seller types. You can pass in multiple seller type values comma separated. (optional)
# @param string $year Car year - 1980 onwards. Valid filter values are those that our Search facets API returns for unique years. You can pass in multiple year values comma separated. (optional)
# @param string $make Car Make - should be a standard OEM Make name. Valid filter values are those that our Search facets API returns for unique make. You can pass in multiple make values separated by comma. e.g. ford,audi (optional)
# @param string $model Car model to search. Valid filter values are those that our Search facets API returns for unique model. You can pass in multiple model values comma separated for e.g f-150,Mustang. (optional)
# @param string $trim Car trim to search. Valid filter values are those that our Search facets API returns for unique trim. You can pass in multiple trim values comma separated (optional)
# @param string $dealer_id Dealer id to filter the cars. (optional)
# @param string $vin Car vin to search (optional)
# @param string $source Source to search cars. Valid filter values are those that our Search facets API returns for unique source. You can pass in multiple source values comma separated (optional)
# @param string $body_type Body type to filter the cars on. Valid filter values are those that our Search facets API returns for unique body types. You can pass in multiple body types comma separated. (optional)
# @param string $body_subtype Body subtype to filter the cars on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated (optional)
# @param string $vehicle_type Vehicle type to filter the cars on. Valid filter values are those that our Search facets API returns for unique vehicle types. You can pass in multiple vehicle type values comma separated (optional)
# @param string $vins Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc (optional)
# @param string $taxonomy_vins Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API. (optional)
# @param string $ymmt Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations. (optional)
# @param string $match Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match (optional)
# @param string $cylinders Cylinders to filter the cars on. Valid filter values are those that our Search facets API returns for unique cylinder values. You can pass in multiple cylinder values comma separated (optional)
# @param string $transmission Transmission to filter the cars on. [a &#x3D; Automatic, m &#x3D; Manual]. Valid filter values are those that our Search facets API returns for unique transmission. You can pass in multiple transmission values comma separated (optional)
# @param string $speeds Speeds to filter the cars on. Valid filter values are those that our Search facets API returns for unique speeds. You can pass in multiple speeds values comma separated (optional)
# @param string $doors Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated (optional)
# @param string $drivetrain Drivetrain to filter the cars on. Valid filter values are those that our Search facets API returns for unique drivetrains. You can pass in multiple drivetrain values comma separated (optional)
# @param string $exterior_color Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated (optional)
# @param string $interior_color Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated (optional)
# @param string $engine Filter listings on engine (optional)
# @param string $engine_type Engine Type to match. Valid filter values are those that our Search facets API returns for unique engine types. You can pass in multiple engine type values comma separated (optional)
# @param string $engine_aspiration Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated (optional)
# @param string $engine_block Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated (optional)
# @param string $miles_range Miles range to filter cars with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000 (optional)
# @param string $price_range Price range to filter cars with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000 (optional)
# @param string $dom_range Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
# @param string $sort_by Sort by field - allowed fields are distance|price|miles|dom|age|posted_at|year. Default sort field is distance from the given point (optional)
# @param string $sort_order Sort order - asc or desc. Default sort order is distance from a point. (optional)
# @param int $rows Number of results to return. Default is 10. Max is 50 (optional)
# @param int $start Page number to fetch the results for the given criteria. Default is 1. Pagination is allowed only till first 1000 results for the search and sort criteria. The page value can be only between 1 to 1000/rows (optional)
# @param string $facets The comma separated list of fields for which facets are requested. Supported fields are - year, make, model, trim, vehicle_type, car_type, body_type, body_subtype, drivetrain, cylinders, transmission, exterior_color, interior_color, doors, engine_type, engine_aspiration, engine_block. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond. (optional)
# @param string $stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond. (optional)
# @param string $country Filter on Country, by default US. Search available on US (United States) and CA (Canada) (optional)
# @param string $plot If plot has value true results in around 25k coordinates with limited fields to plot respective graph (optional)
# @param string $nodedup If nodedup is set to true then will give results using is_searchable (optional)
# @param string $state Filter listsings on State (optional)
# @param string $city Filter listings on city (optional)
# @param string $dealer_name Filter listings on dealer_name (optional)
# @param string $trim_o Filter listings on web scraped trim (optional)
# @param string $trim_r Filter trim on custom possible matches (optional)
# @param string $dom_active_range Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
# @param string $dom_180_range Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50 (optional)
# @param string $options Tokenizer search on options for multiple options use | as seperator (optional)
# @param string $features Tokenizer search on features for multiple options use | as seperator (optional)
{
    my $params = {
    'api_key' => {
        data_type => 'string',
        description => 'The API Authentication Key. Mandatory with all API calls.',
        required => '0',
    },
    'latitude' => {
        data_type => 'double',
        description => 'Latitude component of location',
        required => '0',
    },
    'longitude' => {
        data_type => 'double',
        description => 'Longitude component of location',
        required => '0',
    },
    'radius' => {
        data_type => 'int',
        description => 'Radius around the search location',
        required => '0',
    },
    'car_type' => {
        data_type => 'string',
        description => 'Car type. Allowed values are - new / used / certified',
        required => '0',
    },
    'seller_type' => {
        data_type => 'string',
        description => 'Seller type to filter cars on. Valid filter values are those that our Search facets API returns for unique seller types. You can pass in multiple seller type values comma separated.',
        required => '0',
    },
    'year' => {
        data_type => 'string',
        description => 'Car year - 1980 onwards. Valid filter values are those that our Search facets API returns for unique years. You can pass in multiple year values comma separated.',
        required => '0',
    },
    'make' => {
        data_type => 'string',
        description => 'Car Make - should be a standard OEM Make name. Valid filter values are those that our Search facets API returns for unique make. You can pass in multiple make values separated by comma. e.g. ford,audi',
        required => '0',
    },
    'model' => {
        data_type => 'string',
        description => 'Car model to search. Valid filter values are those that our Search facets API returns for unique model. You can pass in multiple model values comma separated for e.g f-150,Mustang.',
        required => '0',
    },
    'trim' => {
        data_type => 'string',
        description => 'Car trim to search. Valid filter values are those that our Search facets API returns for unique trim. You can pass in multiple trim values comma separated',
        required => '0',
    },
    'dealer_id' => {
        data_type => 'string',
        description => 'Dealer id to filter the cars.',
        required => '0',
    },
    'vin' => {
        data_type => 'string',
        description => 'Car vin to search',
        required => '0',
    },
    'source' => {
        data_type => 'string',
        description => 'Source to search cars. Valid filter values are those that our Search facets API returns for unique source. You can pass in multiple source values comma separated',
        required => '0',
    },
    'body_type' => {
        data_type => 'string',
        description => 'Body type to filter the cars on. Valid filter values are those that our Search facets API returns for unique body types. You can pass in multiple body types comma separated.',
        required => '0',
    },
    'body_subtype' => {
        data_type => 'string',
        description => 'Body subtype to filter the cars on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated',
        required => '0',
    },
    'vehicle_type' => {
        data_type => 'string',
        description => 'Vehicle type to filter the cars on. Valid filter values are those that our Search facets API returns for unique vehicle types. You can pass in multiple vehicle type values comma separated',
        required => '0',
    },
    'vins' => {
        data_type => 'string',
        description => 'Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc',
        required => '0',
    },
    'taxonomy_vins' => {
        data_type => 'string',
        description => 'Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API.',
        required => '0',
    },
    'ymmt' => {
        data_type => 'string',
        description => 'Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe &#39;|&#39; character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - &#39;year|make||&#39; or &#39;year|make|model&#39; or &#39;|make|model|&#39; combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the &#39;vins&#39; or &#39;taxonomy_vins&#39; parameter to the search api instead the year|make|model|trim combinations.',
        required => '0',
    },
    'match' => {
        data_type => 'string',
        description => 'Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match',
        required => '0',
    },
    'cylinders' => {
        data_type => 'string',
        description => 'Cylinders to filter the cars on. Valid filter values are those that our Search facets API returns for unique cylinder values. You can pass in multiple cylinder values comma separated',
        required => '0',
    },
    'transmission' => {
        data_type => 'string',
        description => 'Transmission to filter the cars on. [a &#x3D; Automatic, m &#x3D; Manual]. Valid filter values are those that our Search facets API returns for unique transmission. You can pass in multiple transmission values comma separated',
        required => '0',
    },
    'speeds' => {
        data_type => 'string',
        description => 'Speeds to filter the cars on. Valid filter values are those that our Search facets API returns for unique speeds. You can pass in multiple speeds values comma separated',
        required => '0',
    },
    'doors' => {
        data_type => 'string',
        description => 'Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated',
        required => '0',
    },
    'drivetrain' => {
        data_type => 'string',
        description => 'Drivetrain to filter the cars on. Valid filter values are those that our Search facets API returns for unique drivetrains. You can pass in multiple drivetrain values comma separated',
        required => '0',
    },
    'exterior_color' => {
        data_type => 'string',
        description => 'Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated',
        required => '0',
    },
    'interior_color' => {
        data_type => 'string',
        description => 'Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated',
        required => '0',
    },
    'engine' => {
        data_type => 'string',
        description => 'Filter listings on engine',
        required => '0',
    },
    'engine_type' => {
        data_type => 'string',
        description => 'Engine Type to match. Valid filter values are those that our Search facets API returns for unique engine types. You can pass in multiple engine type values comma separated',
        required => '0',
    },
    'engine_aspiration' => {
        data_type => 'string',
        description => 'Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated',
        required => '0',
    },
    'engine_block' => {
        data_type => 'string',
        description => 'Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated',
        required => '0',
    },
    'miles_range' => {
        data_type => 'string',
        description => 'Miles range to filter cars with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000',
        required => '0',
    },
    'price_range' => {
        data_type => 'string',
        description => 'Price range to filter cars with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000',
        required => '0',
    },
    'dom_range' => {
        data_type => 'string',
        description => 'Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50',
        required => '0',
    },
    'sort_by' => {
        data_type => 'string',
        description => 'Sort by field - allowed fields are distance|price|miles|dom|age|posted_at|year. Default sort field is distance from the given point',
        required => '0',
    },
    'sort_order' => {
        data_type => 'string',
        description => 'Sort order - asc or desc. Default sort order is distance from a point.',
        required => '0',
    },
    'rows' => {
        data_type => 'int',
        description => 'Number of results to return. Default is 10. Max is 50',
        required => '0',
    },
    'start' => {
        data_type => 'int',
        description => 'Page number to fetch the results for the given criteria. Default is 1. Pagination is allowed only till first 1000 results for the search and sort criteria. The page value can be only between 1 to 1000/rows',
        required => '0',
    },
    'facets' => {
        data_type => 'string',
        description => 'The comma separated list of fields for which facets are requested. Supported fields are - year, make, model, trim, vehicle_type, car_type, body_type, body_subtype, drivetrain, cylinders, transmission, exterior_color, interior_color, doors, engine_type, engine_aspiration, engine_block. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.',
        required => '0',
    },
    'stats' => {
        data_type => 'string',
        description => 'The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.',
        required => '0',
    },
    'country' => {
        data_type => 'string',
        description => 'Filter on Country, by default US. Search available on US (United States) and CA (Canada)',
        required => '0',
    },
    'plot' => {
        data_type => 'string',
        description => 'If plot has value true results in around 25k coordinates with limited fields to plot respective graph',
        required => '0',
    },
    'nodedup' => {
        data_type => 'string',
        description => 'If nodedup is set to true then will give results using is_searchable',
        required => '0',
    },
    'state' => {
        data_type => 'string',
        description => 'Filter listsings on State',
        required => '0',
    },
    'city' => {
        data_type => 'string',
        description => 'Filter listings on city',
        required => '0',
    },
    'dealer_name' => {
        data_type => 'string',
        description => 'Filter listings on dealer_name',
        required => '0',
    },
    'trim_o' => {
        data_type => 'string',
        description => 'Filter listings on web scraped trim',
        required => '0',
    },
    'trim_r' => {
        data_type => 'string',
        description => 'Filter trim on custom possible matches',
        required => '0',
    },
    'dom_active_range' => {
        data_type => 'string',
        description => 'Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50',
        required => '0',
    },
    'dom_180_range' => {
        data_type => 'string',
        description => 'Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50',
        required => '0',
    },
    'options' => {
        data_type => 'string',
        description => 'Tokenizer search on options for multiple options use | as seperator',
        required => '0',
    },
    'features' => {
        data_type => 'string',
        description => 'Tokenizer search on features for multiple options use | as seperator',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search' } = { 
    	summary => 'Gets active car listings for the given search criteria',
        params => $params,
        returns => 'SearchResponse',
        };
}
# @return SearchResponse
#
sub search {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'api_key'}) {
        $query_params->{'api_key'} = $self->{api_client}->to_query_value($args{'api_key'});
    }

    # query params
    if ( exists $args{'latitude'}) {
        $query_params->{'latitude'} = $self->{api_client}->to_query_value($args{'latitude'});
    }

    # query params
    if ( exists $args{'longitude'}) {
        $query_params->{'longitude'} = $self->{api_client}->to_query_value($args{'longitude'});
    }

    # query params
    if ( exists $args{'radius'}) {
        $query_params->{'radius'} = $self->{api_client}->to_query_value($args{'radius'});
    }

    # query params
    if ( exists $args{'car_type'}) {
        $query_params->{'car_type'} = $self->{api_client}->to_query_value($args{'car_type'});
    }

    # query params
    if ( exists $args{'seller_type'}) {
        $query_params->{'seller_type'} = $self->{api_client}->to_query_value($args{'seller_type'});
    }

    # query params
    if ( exists $args{'year'}) {
        $query_params->{'year'} = $self->{api_client}->to_query_value($args{'year'});
    }

    # query params
    if ( exists $args{'make'}) {
        $query_params->{'make'} = $self->{api_client}->to_query_value($args{'make'});
    }

    # query params
    if ( exists $args{'model'}) {
        $query_params->{'model'} = $self->{api_client}->to_query_value($args{'model'});
    }

    # query params
    if ( exists $args{'trim'}) {
        $query_params->{'trim'} = $self->{api_client}->to_query_value($args{'trim'});
    }

    # query params
    if ( exists $args{'dealer_id'}) {
        $query_params->{'dealer_id'} = $self->{api_client}->to_query_value($args{'dealer_id'});
    }

    # query params
    if ( exists $args{'vin'}) {
        $query_params->{'vin'} = $self->{api_client}->to_query_value($args{'vin'});
    }

    # query params
    if ( exists $args{'source'}) {
        $query_params->{'source'} = $self->{api_client}->to_query_value($args{'source'});
    }

    # query params
    if ( exists $args{'body_type'}) {
        $query_params->{'body_type'} = $self->{api_client}->to_query_value($args{'body_type'});
    }

    # query params
    if ( exists $args{'body_subtype'}) {
        $query_params->{'body_subtype'} = $self->{api_client}->to_query_value($args{'body_subtype'});
    }

    # query params
    if ( exists $args{'vehicle_type'}) {
        $query_params->{'vehicle_type'} = $self->{api_client}->to_query_value($args{'vehicle_type'});
    }

    # query params
    if ( exists $args{'vins'}) {
        $query_params->{'vins'} = $self->{api_client}->to_query_value($args{'vins'});
    }

    # query params
    if ( exists $args{'taxonomy_vins'}) {
        $query_params->{'taxonomy_vins'} = $self->{api_client}->to_query_value($args{'taxonomy_vins'});
    }

    # query params
    if ( exists $args{'ymmt'}) {
        $query_params->{'ymmt'} = $self->{api_client}->to_query_value($args{'ymmt'});
    }

    # query params
    if ( exists $args{'match'}) {
        $query_params->{'match'} = $self->{api_client}->to_query_value($args{'match'});
    }

    # query params
    if ( exists $args{'cylinders'}) {
        $query_params->{'cylinders'} = $self->{api_client}->to_query_value($args{'cylinders'});
    }

    # query params
    if ( exists $args{'transmission'}) {
        $query_params->{'transmission'} = $self->{api_client}->to_query_value($args{'transmission'});
    }

    # query params
    if ( exists $args{'speeds'}) {
        $query_params->{'speeds'} = $self->{api_client}->to_query_value($args{'speeds'});
    }

    # query params
    if ( exists $args{'doors'}) {
        $query_params->{'doors'} = $self->{api_client}->to_query_value($args{'doors'});
    }

    # query params
    if ( exists $args{'drivetrain'}) {
        $query_params->{'drivetrain'} = $self->{api_client}->to_query_value($args{'drivetrain'});
    }

    # query params
    if ( exists $args{'exterior_color'}) {
        $query_params->{'exterior_color'} = $self->{api_client}->to_query_value($args{'exterior_color'});
    }

    # query params
    if ( exists $args{'interior_color'}) {
        $query_params->{'interior_color'} = $self->{api_client}->to_query_value($args{'interior_color'});
    }

    # query params
    if ( exists $args{'engine'}) {
        $query_params->{'engine'} = $self->{api_client}->to_query_value($args{'engine'});
    }

    # query params
    if ( exists $args{'engine_type'}) {
        $query_params->{'engine_type'} = $self->{api_client}->to_query_value($args{'engine_type'});
    }

    # query params
    if ( exists $args{'engine_aspiration'}) {
        $query_params->{'engine_aspiration'} = $self->{api_client}->to_query_value($args{'engine_aspiration'});
    }

    # query params
    if ( exists $args{'engine_block'}) {
        $query_params->{'engine_block'} = $self->{api_client}->to_query_value($args{'engine_block'});
    }

    # query params
    if ( exists $args{'miles_range'}) {
        $query_params->{'miles_range'} = $self->{api_client}->to_query_value($args{'miles_range'});
    }

    # query params
    if ( exists $args{'price_range'}) {
        $query_params->{'price_range'} = $self->{api_client}->to_query_value($args{'price_range'});
    }

    # query params
    if ( exists $args{'dom_range'}) {
        $query_params->{'dom_range'} = $self->{api_client}->to_query_value($args{'dom_range'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sort_by'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'sort_order'}) {
        $query_params->{'sort_order'} = $self->{api_client}->to_query_value($args{'sort_order'});
    }

    # query params
    if ( exists $args{'rows'}) {
        $query_params->{'rows'} = $self->{api_client}->to_query_value($args{'rows'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'facets'}) {
        $query_params->{'facets'} = $self->{api_client}->to_query_value($args{'facets'});
    }

    # query params
    if ( exists $args{'stats'}) {
        $query_params->{'stats'} = $self->{api_client}->to_query_value($args{'stats'});
    }

    # query params
    if ( exists $args{'country'}) {
        $query_params->{'country'} = $self->{api_client}->to_query_value($args{'country'});
    }

    # query params
    if ( exists $args{'plot'}) {
        $query_params->{'plot'} = $self->{api_client}->to_query_value($args{'plot'});
    }

    # query params
    if ( exists $args{'nodedup'}) {
        $query_params->{'nodedup'} = $self->{api_client}->to_query_value($args{'nodedup'});
    }

    # query params
    if ( exists $args{'state'}) {
        $query_params->{'state'} = $self->{api_client}->to_query_value($args{'state'});
    }

    # query params
    if ( exists $args{'city'}) {
        $query_params->{'city'} = $self->{api_client}->to_query_value($args{'city'});
    }

    # query params
    if ( exists $args{'dealer_name'}) {
        $query_params->{'dealer_name'} = $self->{api_client}->to_query_value($args{'dealer_name'});
    }

    # query params
    if ( exists $args{'trim_o'}) {
        $query_params->{'trim_o'} = $self->{api_client}->to_query_value($args{'trim_o'});
    }

    # query params
    if ( exists $args{'trim_r'}) {
        $query_params->{'trim_r'} = $self->{api_client}->to_query_value($args{'trim_r'});
    }

    # query params
    if ( exists $args{'dom_active_range'}) {
        $query_params->{'dom_active_range'} = $self->{api_client}->to_query_value($args{'dom_active_range'});
    }

    # query params
    if ( exists $args{'dom_180_range'}) {
        $query_params->{'dom_180_range'} = $self->{api_client}->to_query_value($args{'dom_180_range'});
    }

    # query params
    if ( exists $args{'options'}) {
        $query_params->{'options'} = $self->{api_client}->to_query_value($args{'options'});
    }

    # query params
    if ( exists $args{'features'}) {
        $query_params->{'features'} = $self->{api_client}->to_query_value($args{'features'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchResponse', $response);
    return $_response_object;
}

1;
